// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "ripper@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users/auth/logout": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "logout user",
                "parameters": [
                    {
                        "description": "access_token: token",
                        "name": "access_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "403": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "500": {
                        "description": "error: err",
                        "schema": {}
                    }
                }
            }
        },
        "/users/auth/refresh": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "refresh access token",
                "responses": {
                    "200": {
                        "description": "accept token: token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "403": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "500": {
                        "description": "error: err",
                        "schema": {}
                    }
                }
            }
        },
        "/users/auth/sing-in": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "user authentication",
                "parameters": [
                    {
                        "description": "phone number and password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UserSingIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "access_token: token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "500": {
                        "description": "error: err",
                        "schema": {}
                    }
                }
            }
        },
        "/users/auth/sing-up": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "registrate user",
                "parameters": [
                    {
                        "description": "account info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UserSingUp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "500": {
                        "description": "error: err",
                        "schema": {}
                    }
                }
            }
        },
        "/users/profile/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "get user profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "401": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "403": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "500": {
                        "description": "error: err",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "update user profile",
                "parameters": [
                    {
                        "description": "rows to update",
                        "name": "input",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "401": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "403": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "500": {
                        "description": "error: err",
                        "schema": {}
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user's id to delete",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "403": {
                        "description": "error: err",
                        "schema": {}
                    },
                    "500": {
                        "description": "error: err",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "model.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "raiting": {
                    "type": "number"
                }
            }
        },
        "service.UserSingIn": {
            "type": "object",
            "required": [
                "password",
                "phone_number"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "service.UserSingUp": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "InnoTaxi API",
	Description:      "API for order taxi",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
